---
# .clang-format by weycen, 基于Google格式修改
# 导出: clang-format -style=Google -dump-config > .clang-format
# 语言: None, Cpp, Java, JavaScript, ObjC, Proto, TableGen, TextProto
Language:        Cpp
# BasedOnStyle:  Google
# 访问说明符(public、private等)的偏移
AccessModifierOffset: -1
# 开括号(开圆括号、开尖括号、开方括号)后的对齐: Align, DontAlign, AlwaysBreak(总是在开括号后换行)
AlignAfterOpenBracket: Align
# 对齐所有连续的宏定义
AlignConsecutiveMacros: true
# 连续赋值时，对齐所有等号
AlignConsecutiveAssignments: true
# 对齐所有连续位域
AlignConsecutiveBitFields: true
# 连续声明时，对齐所有声明的变量名
AlignConsecutiveDeclarations: true
# 逃脱换行(使用反斜杠换行)的反斜杠的对齐方式:DontAlign, Left, Right
AlignEscapedNewlines: Left
# 水平对齐二元和三元表达式的操作数: DontAlign, Align, AlignAfterOperator
AlignOperands:   Align
# 对齐连续的尾随的注释
AlignTrailingComments: true
# 允许函数调用的所有参数在下一行
AllowAllArgumentsOnNextLine: true
# 允许所有构造函数初始化器在下一行
AllowAllConstructorInitializersOnNextLine: true
# 允许函数声明的所有参数放在下一行
AllowAllParametersOfDeclarationOnNextLine: true
# 允许短的enum成员放在同一行
AllowShortEnumsOnASingleLine: true
# 允许短的块放在同一行: Never, Empty, Always
AllowShortBlocksOnASingleLine: Never
# 允许短的case标签放在同一行
AllowShortCaseLabelsOnASingleLine: false
# 允许短的函数放在同一行: None, InlineOnly(定义在类中), Empty(空函数), Inline(定义在类中，空函数), All
AllowShortFunctionsOnASingleLine: All
# 允许短的匿名函数放在同一行: None, Empty, Inline, All
AllowShortLambdasOnASingleLine: All
# 允许短的if语句保持在同一行: Never, WithoutElse, Always
AllowShortIfStatementsOnASingleLine: WithoutElse
# 允许短的循环保持在同一行
AllowShortLoopsOnASingleLine: true
# 总是在定义返回类型后换行(弃用): None, All, TopLevel
#AlwaysBreakAfterDefinitionReturnType: None
# 总是在返回类型后换行: None, All, TopLevel(顶级函数，不包括在类中的函数), 
#  All(所有的定义，不包括声明), TopLevel(所有的顶级函数的定义)
AlwaysBreakAfterReturnType: None
# 总是在多行字符串前换行
AlwaysBreakBeforeMultilineStrings: true
# 总是在template声明后换行: No, MultiLine, Yes
AlwaysBreakTemplateDeclarations: Yes
# false表示函数所有实参要么都在同一行，要么都各自一行
BinPackArguments: true
# false表示函数所有形参要么都在同一行，要么都各自一行
BinPackParameters: true
# 大括号换行，只有当BreakBeforeBraces设置为Custom时才有效
BraceWrapping:
  # case标签后面
  AfterCaseLabel:  false
  # class定义后面
  AfterClass:      false
  # 控制语句后面: Never, MultiLine, Always
  AfterControlStatement: Never
  # enum定义后面
  AfterEnum:       false
  # 函数定义后面
  AfterFunction:   false
  # 命名空间定义后面
  AfterNamespace:  false
  # ObjC定义后面
  AfterObjCDeclaration: false
  # struct定义后面
  AfterStruct:     false
  # union定义后面
  AfterUnion:      false
  # 外部块(extern "C")之后
  AfterExternBlock: false
  # catch之前
  BeforeCatch:     false
  # else之前
  BeforeElse:      false
  # 匿名函数体之前
  BeforeLambdaBody: false
  # while之前
  BeforeWhile:     false
  # 缩进大括号
  IndentBraces:    false
  # 分开空的函数
  SplitEmptyFunction: true
  # 分开空的record (class, struct or union) 
  SplitEmptyRecord: true
  # 分开空的名字空间
  SplitEmptyNamespace: true
# 在二元运算符前换行: None(在操作符后换行), NonAssignment(在非赋值的操作符前换行), All(在操作符前换行)
BreakBeforeBinaryOperators: None
# 在大括号前换行: Attach(始终将大括号附加到周围的上下文), Linux(除函数、命名空间和类定义，与Attach类似), 
#   Mozilla(除枚举、函数、记录定义，与Attach类似), Stroustrup(除函数定义、catch、else，与Attach类似), 
#   Allman(总是在大括号前换行), GNU(总是在大括号前换行，并对于控制语句的大括号增加额外的缩进), WebKit(在函数前换行), Custom
#   注：这里认为语句块也属于函数
BreakBeforeBraces: Attach
# 在继承的逗号前换行
BreakBeforeInheritanceComma: false
# 在继承列表换行: BeforeColon, BeforeComma, AfterColon
BreakInheritanceList: BeforeColon
# 在三元运算符(?:)前换行
BreakBeforeTernaryOperators: true
# 在构造函数的初始化列表的逗号前换行
BreakConstructorInitializersBeforeComma: false
# 在构造函数的初始化列表前换行: BeforeColon, BeforeComma, AfterColon
BreakConstructorInitializers: BeforeColon
# 在Java字段注释后换行
BreakAfterJavaFieldAnnotations: false
# 字符串常量过长时自动换行
BreakStringLiterals: true
# 每行字符长度的限制，0表示没有限制
ColumnLimit:     120
# 描述具有特殊意义的注释的正则表达式，它不应该被分割为多行或以其它方式改变
CommentPragmas:  '^ IWYU pragma:'
# 紧凑的名称空间
CompactNamespaces: false
# 构造函数的初始化列表要么都在同一行，要么都各自一行
ConstructorInitializerAllOnOneLineOrOnePerLine: true
# 构造函数的初始化列表的缩进宽度
ConstructorInitializerIndentWidth: 4
# 延续的行的缩进宽度
ContinuationIndentWidth: 4
# 去除C++11的列表初始化的大括号{后和}前的空格
Cpp11BracedListStyle: true
# 继承行节尾
DeriveLineEnding: true
# 继承最常用的指针和引用的对齐方式
DerivePointerAlignment: true
# 完全禁用格式化
DisableFormat:   false
# 自动检测函数的调用和定义是否被格式为每行一个参数(Experimental)
ExperimentalAutoDetectBinPacking: false
# 自动添加固定名字空间末尾注释
FixNamespaceComments: true
# 需要被解读为foreach循环而不是函数调用的宏
ForEachMacros:
  - foreach
  - Q_FOREACH
  - BOOST_FOREACH
# 头文件排序策略: 
#  Preserve(Sort each #include block separately), 
#  Merge(Merge multiple #include blocks together and sort as one), 
#  Regroup(Merge multiple #include blocks together and sort as one), 顺序: 关联.h, C库, C++库(无扩展), 其它库, 本项目.h
IncludeBlocks:   Regroup
# 对#include进行排序，匹配了某正则表达式的#include拥有对应的优先级，匹配不到的则默认优先级为INT_MAX(优先级越小排序越靠前)，
#   可以定义负数优先级从而保证某些#include永远在最前面
IncludeCategories:
  - Regex:           '^<ext/.*\.h>'
    Priority:        2
    SortPriority:    0
  - Regex:           '^<.*\.h>'
    Priority:        1
    SortPriority:    0
  - Regex:           '^<.*'
    Priority:        2
    SortPriority:    0
  - Regex:           '.*'
    Priority:        3
    SortPriority:    0

IncludeIsMainRegex: '([-_](test|unittest))?$'

IncludeIsMainSourceRegex: ''
# 缩进case标签
IndentCaseLabels: true
# 缩进case语块
IndentCaseBlocks: false
# 缩进goto标签
IndentGotoLabels: true
# 缩进预处理指令: None, AfterHash, BeforeHash
IndentPPDirectives: None
# 缩进外部(extern "C")块: AfterExternBlock, NoIndent, Indent
IndentExternBlock: AfterExternBlock
# 缩进宽度
IndentWidth:     2
# 函数返回类型换行时，缩进函数声明或函数定义的函数名
IndentWrappedFunctionNames: false
# 在容器常量(数组和对象)尾部插入逗号：None, Wrapped
InsertTrailingCommas: None
# Java脚本引用: Leave, Single, Double
JavaScriptQuotes: Leave
# Java脚本换行导入
JavaScriptWrapImports: true
# 保留在块开始处的空行
KeepEmptyLinesAtTheStartOfBlocks: false
# 开始一个块的宏的正则表达式
MacroBlockBegin: ''
# 结束一个块的宏的正则表达式
MacroBlockEnd:   ''
# 连续空行的最大数量
MaxEmptyLinesToKeep: 1
# 命名空间的缩进: None, Inner(缩进嵌套的命名空间中的内容), All
NamespaceIndentation: None
# 列表项分行: Auto, Always, Never
ObjCBinPackProtocolList: Never
# 使用ObjC块时缩进宽度
ObjCBlockIndentWidth: 2
# 在ObjC的protocol列表前添加一个空格
ObjCBreakBeforeNestedBlockParam: true
# ObjC在嵌套块Paramtocol列表之前换行
ObjCSpaceAfterProperty: false
# 在ObjC的protocol列表前添加一个空格
ObjCSpaceBeforeProtocolList: true
PenaltyBreakAssignment: 2
PenaltyBreakBeforeFirstCallParameter: 1
# 在一个注释中引入换行的penalty
PenaltyBreakComment: 300
# 第一次在<<前换行的penalty
PenaltyBreakFirstLessLess: 120
# 在一个字符串字面量中引入换行的penalty
PenaltyBreakString: 1000
PenaltyBreakTemplateDeclaration: 10
# 对于每个在行字符数限制之外的字符的penalty
PenaltyExcessCharacter: 1000000
# 将函数的返回类型放到它自己的行的penalty
PenaltyReturnTypeOnItsOwnLine: 200
# 指针和引用的对齐: Left, Right, Middle
PointerAlignment: Left
RawStringFormats:
  - Language:        Cpp
    Delimiters:
      - cc
      - CC
      - cpp
      - Cpp
      - CPP
      - 'c++'
      - 'C++'
    CanonicalDelimiter: ''
    BasedOnStyle:    google
  - Language:        TextProto
    Delimiters:
      - pb
      - PB
      - proto
      - PROTO
    EnclosingFunctions:
      - EqualsProto
      - EquivToProto
      - PARSE_PARTIAL_TEXT_PROTO
      - PARSE_TEST_PROTO
      - PARSE_TEXT_PROTO
      - ParseTextOrDie
      - ParseTextProtoOrDie
      - ParseTestProto
      - ParsePartialTestProto
    CanonicalDelimiter: ''
    BasedOnStyle:    google
# 允许重新排版注释
ReflowComments:  true
# 允许排序#include
SortIncludes:    true
# 允许排序使用声明
SortUsingDeclarations: true
# 在C风格显式类型转换后添加空格
SpaceAfterCStyleCast: false
# 在逻辑非后添加空格
SpaceAfterLogicalNot: false
# 在模板关键字之后添加空格
SpaceAfterTemplateKeyword: true
# 在赋值运算符之前添加空格
SpaceBeforeAssignmentOperators: true
# 在Cpp11带括号的列表之前添加空格
SpaceBeforeCpp11BracedList: false
# 在构造函数初始化冒号前添加空格
SpaceBeforeCtorInitializerColon: true
# 在继承冒号前添加空格
SpaceBeforeInheritanceColon: true
# 开圆括号之前添加一个空格: Never, ControlStatements, Always
SpaceBeforeParens: ControlStatements
# 在for循环的冒号之前添加空格
SpaceBeforeRangeBasedForLoopColon: true
# 在空的语块中添加空格
SpaceInEmptyBlock: false
# 在空的圆括号中添加空格
SpaceInEmptyParentheses: false
# 在尾随的注释前添加的空格数(只适用于//)
SpacesBeforeTrailingComments: 2
# 在尖括号的<后和>前添加空格
SpacesInAngles:  false
# 在条件语句中添加空格
SpacesInConditionalStatement: false
# 在容器(ObjC和JavaScript的数组和字典等)常量中添加空格
SpacesInContainerLiterals: true
# 在C风格类型转换的括号中添加空格
SpacesInCStyleCastParentheses: false
# 在圆括号的(后和)前添加空格
SpacesInParentheses: false
# 在方括号的[后和]前添加空格，lamda表达式和未指明大小的数组的声明不受影响
SpacesInSquareBrackets: false
# 在方括号的前添加空格
SpaceBeforeSquareBrackets: false
# 标准: Cpp03, Cpp11, Auto
Standard:        Auto
StatementMacros:
  - Q_UNUSED
  - QT_REQUIRE_VERSION
# Tab宽度
TabWidth:        8
# 使用CRLF换行
UseCRLF:         false
# 使用tab字符: Never, ForIndentation, ForContinuationAndIndentation, Always
UseTab:          Never
WhitespaceSensitiveMacros:
  - STRINGIZE
  - PP_STRINGIZE
  - BOOST_PP_STRINGIZE
...

